#!/usr/bin/env python3
# This file was auto generated by mvme-{{mvme_version}} on {{export_date}}.

import math
import sys

from ROOT import TFile, TH1D

from {{event_import}} import {{struct_name}}

HistoBins = 2**12

if __name__ == "__main__":
    if len(sys.argv) < 2:
        print("Usage: " + sys.argv[0] + " <input_file>");
        sys.exit(1);

    inputFilename = sys.argv[1]
    print("Reading input from: " + inputFilename)

    inFile = None

    if inputFilename[-3:] == ".gz":
        import gzip
        inFile = gzip.GzipFile(inputFilename, 'rb')
    else:
        inFile = open(inputFilename, 'rb')

    outputFilename = "pyroot_" + inputFilename[:inputFilename.index('.')] + "_histos.root"

    print("Writing histograms to " + outputFilename)

    f = TFile(outputFilename, "recreate")

    if not f.IsOpen():
        sys.exit(1)

    histoCount  = 0
    event       = {{struct_name}}
    histo_lists = []

    for arrayIndex in range(event.ArrayCount):
        paramCount = event.ArrayDimensions[arrayIndex]

        histos = list()

        for paramIndex in range(paramCount):
            limits = event.Limits[arrayIndex][paramIndex]
            name   = event.ArrayNames[arrayIndex] + "[" + str(paramIndex) + "]"
            title  = name

            histo = TH1D(name, title, HistoBins, limits[0], limits[1])

            histos.append(histo)
            histoCount += 1

        histo_lists.append(histos)

    print("Created %d TH1D instances." % (histoCount))
    print("Filling histograms...")

    eventCount = 0

    while True:
        event = {{struct_name}}.read(inFile)
        if not event: break

        eventCount += 1

        # Loop over all exported arrays.
        for arrayIndex in range(event.ArrayCount):
{{#full?}}
            array = event.getArray(arrayIndex)
            # Loop over array elements, filling the histogram for the current
            # array and parameter.
            for paramIndex, value in enumerate(array):
                if not math.isnan(value):
                    histo = histo_lists[arrayIndex][paramIndex]
                    histo.Fill(value)
{{/full?}}
{{#sparse?}}
            sparseArray = event.getArray(arrayIndex)
            # Loop over the lists of indexes and values, filling the
            # corresponding histogram.
            for paramIndex, value in sparseArray:
                histo = histo_lists[arrayIndex][paramIndex]
                histo.Fill(value)
{{/sparse?}}

    f.Write()

    print("Read %u events from %s" % (eventCount, inputFilename))
{{!
vim:ft=python
}}
