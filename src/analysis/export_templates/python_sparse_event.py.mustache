# This file was auto generated by mvme-{{mvme_version}} on {{export_date}}.

import struct

class {{struct_name}}:
    class SparseArray:
        def __init__(self):
            self.indexes = []
            self.values  = []

        def __len__(self):
            assert len(self.indexes) == len(self.values)
            return len(self.indexes)

        def __iter__(self):
            assert len(self.indexes) == len(self.values)
            return zip(self.indexes, self.values)

    def __init__(self):
{{#array_info}}
        self.{{variable_name}} = {{struct_name}}.SparseArray()
{{/array_info}}

    ArrayCount = {{array_count}}

    Limits = [
{{#array_info}}
        [
{{#limits}}
            ( {{lower_limit}}, {{upper_limit}} ),
{{/limits}}
        ],
{{/array_info}}
    ]


    ArrayDimensions = [
{{#array_info}}
        {{dimension}},
{{/array_info}}
    ]

    ArrayNames = [
{{#array_info}}
        "{{analysis_name}}",
{{/array_info}}
    ]

    UnitLabels = [
{{#array_info}}
        "{{unit}}",
{{/array_info}}
    ]

    def getArray(self, arrayIndex):
{{#array_info}}
        if arrayIndex == {{index}}:
            return self.{{variable_name}}
{{/array_info}}
        return None

    @staticmethod
    def read(inputObject):

        def read_into_sparse_array(dest):
            # Read the uint16_t entry count
            fmt        = "=H"
            size       = struct.calcsize(fmt)
            entryCount = struct.unpack(fmt, inputObject.read(size))[0]

            if entryCount > 0:
                # Read the list of uint16_t indexes
                fmt     = f"={entryCount:d}H"
                size    = struct.calcsize(fmt)
                dest.indexes = struct.unpack(fmt, inputObject.read(size))

                # Read the list of double values
                fmt     = f"={entryCount:d}d"
                size    = struct.calcsize(fmt)
                dest.values  = struct.unpack(fmt, inputObject.read(size))

        try:
            result = {{struct_name}}()
{{#array_info}}
            read_into_sparse_array(result.{{variable_name}})
{{/array_info}}
            return result

        except struct.error:
            return None

{{!
vim:ft=python
}}
